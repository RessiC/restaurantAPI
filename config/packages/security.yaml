security:
    enable_authenticator_manager: true
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User\User
                property: email
    firewalls:
        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        api:
            pattern:   ^/api
            stateless: true
            jwt: ~
    access_control:
        - { path: ^/api/login,                          roles: PUBLIC_ACCESS }
        - { path: ^/api/restaurants/[0-9]+/products,    roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api/restaurants/[0-9]+/orders,      roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api/restaurants,                    roles: PUBLIC_ACCESS }
        - { path: ^/api,                                roles: IS_AUTHENTICATED_FULLY }


          #todo : role hierarchy for access_control. Orders and products will need ROLE_EMPLOYEE (ROLE_MANAGER and ROLE_ADMIN)

when@test:
    security:
        password_hashers:
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
